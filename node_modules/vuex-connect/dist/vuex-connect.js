/*!
 * vuex-connect v1.3.1
 * https://github.com/ktsn/vuex-connect
 *
 * Copyright (c) 2016 katashin
 * Released under the MIT license
 * https://github.com/ktsn/vuex-connect/blob/master/LICENSE
 */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vue'), require('vuex')) :
	typeof define === 'function' && define.amd ? define(['exports', 'vue', 'vuex'], factory) :
	(factory((global.VuexConnect = {}),global.Vue,global.Vuex));
}(this, (function (exports,Vue,vuex) { 'use strict';

Vue = Vue && Vue.hasOwnProperty('default') ? Vue['default'] : Vue;

function camelToKebab(str) {
  return str.replace(/([a-z\d])([A-Z])/g, '$1-$2').toLowerCase();
}

function merge() {
  var target = {};

  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  args.forEach(function (obj) {
    Object.keys(obj).forEach(function (key) {
      target[key] = obj[key];
    });
  });
  return target;
}

function pick(obj, keys) {
  var res = {};
  keys.forEach(function (key) {
    if (obj[key] !== void 0) {
      res[key] = obj[key];
    }
  });
  return res;
}

function omit(obj, keys) {
  var res = {};
  Object.keys(obj).forEach(function (key) {
    if (!includes(keys, key)) {
      res[key] = obj[key];
    }
  });
  return res;
}

function flattenObject(obj) {
  var res = [];
  Object.keys(obj).forEach(function (key) {
    res.push(obj[key]);
  });
  return res;
}

function mapValues(obj, f) {
  var res = {};
  Object.keys(obj).forEach(function (key) {
    res[key] = f(obj[key], key);
  });
  return res;
}

function keys() {
  return Object.keys(merge.apply(undefined, arguments));
}

function includes(array, item) {
  return array.indexOf(item) > -1;
}

var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var VERSION = Number(Vue.version.split('.')[0]);

var LIFECYCLE_KEYS = ['init', 'created', 'beforeCompile', 'compiled', 'ready', 'attached', 'detached', 'beforeDestroy', 'destroyed',

// 2.0
'beforeCreate', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'activated', 'deactivated'];

var createConnect = function createConnect(transform) {
  return function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var _mapValues = mapValues(options, normalizeOptions);

    var _mapValues$stateToPro = _mapValues.stateToProps;
    var stateToProps = _mapValues$stateToPro === undefined ? {} : _mapValues$stateToPro;
    var _mapValues$gettersToP = _mapValues.gettersToProps;
    var gettersToProps = _mapValues$gettersToP === undefined ? {} : _mapValues$gettersToP;
    var _mapValues$actionsToP = _mapValues.actionsToProps;
    var actionsToProps = _mapValues$actionsToP === undefined ? {} : _mapValues$actionsToP;
    var _mapValues$actionsToE = _mapValues.actionsToEvents;
    var actionsToEvents = _mapValues$actionsToE === undefined ? {} : _mapValues$actionsToE;
    var _mapValues$mutationsT = _mapValues.mutationsToProps;
    var mutationsToProps = _mapValues$mutationsT === undefined ? {} : _mapValues$mutationsT;
    var _mapValues$mutationsT2 = _mapValues.mutationsToEvents;
    var mutationsToEvents = _mapValues$mutationsT2 === undefined ? {} : _mapValues$mutationsT2;
    var _mapValues$methodsToP = _mapValues.methodsToProps;
    var methodsToProps = _mapValues$methodsToP === undefined ? {} : _mapValues$methodsToP;
    var _mapValues$methodsToE = _mapValues.methodsToEvents;
    var methodsToEvents = _mapValues$methodsToE === undefined ? {} : _mapValues$methodsToE;
    var _mapValues$lifecycle = _mapValues.lifecycle;
    var lifecycle = _mapValues$lifecycle === undefined ? {} : _mapValues$lifecycle;


    return function (name, Component) {
      if (typeof name !== 'string') {
        Component = name;
        name = getOptions(Component).name || 'wrapped-anonymous-component';
      }

      var propKeys = keys(stateToProps, gettersToProps, actionsToProps, mutationsToProps, methodsToProps);

      var eventKeys = keys(actionsToEvents, mutationsToEvents, methodsToEvents);

      var containerProps = omit(getOptions(Component).props || {}, propKeys);

      var options = {
        name: 'connect-' + name,
        props: containerProps,
        components: defineProperty({}, name, Component),
        computed: merge(vuex.mapState(stateToProps), vuex.mapGetters(gettersToProps)),
        methods: merge(vuex.mapActions(merge(actionsToProps, actionsToEvents)), vuex.mapMutations(merge(mutationsToProps, mutationsToEvents)), mapValues(merge(methodsToProps, methodsToEvents), bindStore))
      };

      insertLifecycleMixin(options, lifecycle);
      insertRenderer(options, name, propKeys.concat(Object.keys(containerProps)), eventKeys);

      if (transform) {
        transform(options, lifecycle);
      }

      return Vue.extend(options);
    };
  };
};

function insertRenderer(options, name, propKeys, eventKeys) {
  if (VERSION >= 2) {
    options.render = function (h) {
      return h(name, {
        props: pick(this, propKeys),
        on: pick(this, eventKeys),
        scopedSlots: this.$scopedSlots
      }, flattenObject(this.$slots));
    };
  } else {
    var props = propKeys.map(bindProp);
    options.template = '<' + name + ' v-ref:component ' + props.join(' ') + '><slot></slot></' + name + '>';

    // register event listeners on the compiled hook
    // because vue cannot recognize camelCase name on the template
    options.compiled = function () {
      var _this = this;

      eventKeys.forEach(function (key) {
        _this.$refs.component.$on(key, _this[key]);
      });
    };
  }
}

function insertLifecycleMixin(options, lifecycle) {
  options.mixins = [mapValues(pick(lifecycle, LIFECYCLE_KEYS), function (f) {
    return function boundLifecycle() {
      f.call(this, this.$store);
    };
  })];
}

function getOptions(Component) {
  if (typeof Component === 'function') {
    return Component.options;
  }
  return Component;
}

function bindProp(key) {
  return ':' + camelToKebab(key) + '="' + key + '"';
}

function bindStore(fn) {
  return function boundFunctionWithStore() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return fn.call.apply(fn, [this, this.$store].concat(args));
  };
}

function normalizeOptions(options) {
  return Array.isArray(options) ? options.reduce(function (obj, value) {
    obj[value] = value;
    return obj;
  }, {}) : options;
}

var connect = createConnect();

exports.connect = connect;
exports.createConnect = createConnect;

Object.defineProperty(exports, '__esModule', { value: true });

})));
