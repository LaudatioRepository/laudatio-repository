{"version":3,"file":"image-compressor.esm.js","sources":["../node_modules/blueimp-canvas-to-blob/js/canvas-to-blob.js","../node_modules/is-blob/index.js","../src/defaults.js","../src/utils.js","../src/index.js"],"sourcesContent":["/*\n * JavaScript Canvas to Blob\n * https://github.com/blueimp/JavaScript-Canvas-to-Blob\n *\n * Copyright 2012, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on stackoverflow user Stoive's code snippet:\n * http://stackoverflow.com/q/4998908\n */\n\n/* global atob, Blob, define */\n\n;(function (window) {\n  'use strict'\n\n  var CanvasPrototype =\n    window.HTMLCanvasElement && window.HTMLCanvasElement.prototype\n  var hasBlobConstructor =\n    window.Blob &&\n    (function () {\n      try {\n        return Boolean(new Blob())\n      } catch (e) {\n        return false\n      }\n    })()\n  var hasArrayBufferViewSupport =\n    hasBlobConstructor &&\n    window.Uint8Array &&\n    (function () {\n      try {\n        return new Blob([new Uint8Array(100)]).size === 100\n      } catch (e) {\n        return false\n      }\n    })()\n  var BlobBuilder =\n    window.BlobBuilder ||\n    window.WebKitBlobBuilder ||\n    window.MozBlobBuilder ||\n    window.MSBlobBuilder\n  var dataURIPattern = /^data:((.*?)(;charset=.*?)?)(;base64)?,/\n  var dataURLtoBlob =\n    (hasBlobConstructor || BlobBuilder) &&\n    window.atob &&\n    window.ArrayBuffer &&\n    window.Uint8Array &&\n    function (dataURI) {\n      var matches,\n        mediaType,\n        isBase64,\n        dataString,\n        byteString,\n        arrayBuffer,\n        intArray,\n        i,\n        bb\n      // Parse the dataURI components as per RFC 2397\n      matches = dataURI.match(dataURIPattern)\n      if (!matches) {\n        throw new Error('invalid data URI')\n      }\n      // Default to text/plain;charset=US-ASCII\n      mediaType = matches[2]\n        ? matches[1]\n        : 'text/plain' + (matches[3] || ';charset=US-ASCII')\n      isBase64 = !!matches[4]\n      dataString = dataURI.slice(matches[0].length)\n      if (isBase64) {\n        // Convert base64 to raw binary data held in a string:\n        byteString = atob(dataString)\n      } else {\n        // Convert base64/URLEncoded data component to raw binary:\n        byteString = decodeURIComponent(dataString)\n      }\n      // Write the bytes of the string to an ArrayBuffer:\n      arrayBuffer = new ArrayBuffer(byteString.length)\n      intArray = new Uint8Array(arrayBuffer)\n      for (i = 0; i < byteString.length; i += 1) {\n        intArray[i] = byteString.charCodeAt(i)\n      }\n      // Write the ArrayBuffer (or ArrayBufferView) to a blob:\n      if (hasBlobConstructor) {\n        return new Blob([hasArrayBufferViewSupport ? intArray : arrayBuffer], {\n          type: mediaType\n        })\n      }\n      bb = new BlobBuilder()\n      bb.append(arrayBuffer)\n      return bb.getBlob(mediaType)\n    }\n  if (window.HTMLCanvasElement && !CanvasPrototype.toBlob) {\n    if (CanvasPrototype.mozGetAsFile) {\n      CanvasPrototype.toBlob = function (callback, type, quality) {\n        var self = this\n        setTimeout(function () {\n          if (quality && CanvasPrototype.toDataURL && dataURLtoBlob) {\n            callback(dataURLtoBlob(self.toDataURL(type, quality)))\n          } else {\n            callback(self.mozGetAsFile('blob', type))\n          }\n        })\n      }\n    } else if (CanvasPrototype.toDataURL && dataURLtoBlob) {\n      CanvasPrototype.toBlob = function (callback, type, quality) {\n        var self = this\n        setTimeout(function () {\n          callback(dataURLtoBlob(self.toDataURL(type, quality)))\n        })\n      }\n    }\n  }\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return dataURLtoBlob\n    })\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = dataURLtoBlob\n  } else {\n    window.dataURLtoBlob = dataURLtoBlob\n  }\n})(window)\n","/* globals Blob */\n'use strict';\nvar toString = Object.prototype.toString;\n\nmodule.exports = function (x) {\n\treturn x instanceof Blob || toString.call(x) === '[object Blob]';\n};\n","export default {\n  /**\n   * Indicates if read the image's Exif Orientation information,\n   * and then rotate or flip the image automatically.\n   * @type {boolean}\n   */\n  checkOrientation: true,\n\n  /**\n   * The max width of the output image.\n   * @type {number}\n   */\n  maxWidth: Infinity,\n\n  /**\n   * The max height of the output image.\n   * @type {number}\n   */\n  maxHeight: Infinity,\n\n  /**\n   * The min width of the output image.\n   * @type {number}\n   */\n  minWidth: 0,\n\n  /**\n   * The min height of the output image.\n   * @type {number}\n   */\n  minHeight: 0,\n\n  /**\n   * The width of the output image.\n   * If not specified, the natural width of the source image will be used.\n   * @type {number}\n   */\n  width: undefined,\n\n  /**\n   * The height of the output image.\n   * If not specified, the natural height of the source image will be used.\n   * @type {number}\n   */\n  height: undefined,\n\n  /**\n   * The quality of the output image.\n   * It must be a number between `0` and `1`,\n   * and only available for `image/jpeg` and `image/webp` images.\n   * Check out {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob canvas.toBlob}.\n   * @type {number}\n   */\n  quality: 0.8,\n\n  /**\n   * The mime type of the output image.\n   * By default, the original mime type of the source image file will be used.\n   * @type {string}\n   */\n  mimeType: 'auto',\n\n  /**\n   * PNG files over this value (5M by default) will be converted to JPEGs.\n   * To disable this, just set the value to `Infinity`.\n   * Check out {@link https://github.com/xkeshi/image-compressor/issues/2 #2}.\n   * @type {number}\n   */\n  convertSize: 5000000,\n\n  /**\n   * The success callback for the image compressing process.\n   * @type {Function}\n   * @param {File} file - The compressed image File object.\n   * @example\n   * function (file) { console.log(file) }\n   */\n  success: null,\n\n  /**\n   * The error callback for the image compressing process.\n   * @type {Function}\n   * @param {Error} err - An Error object.\n   * @example\n   * function (err) { console.log(err.message) }\n   */\n  error: null,\n};\n","const REGEXP_IMAGE_TYPE = /^image\\/.+$/;\n\n/**\n * Check if the given value is a mime type of image.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given is a mime type of image, else `false`.\n */\nexport function isImageType(value) {\n  return REGEXP_IMAGE_TYPE.test(value);\n}\n\n/**\n * Convert image type to extension.\n * @param {string} value - The image type to convert.\n * @param {boolean} [includeDot=true] - Include a leading dot or not.\n * @returns {boolean} Returns the image extension.\n */\nexport function imageTypeToExtension(value, includeDot = true) {\n  let extension = isImageType(value) ? value.substr(6) : '';\n\n  if (extension === 'jpeg') {\n    extension = 'jpg';\n  }\n\n  if (extension && includeDot) {\n    extension = `.${extension}`;\n  }\n\n  return extension;\n}\n\nconst { fromCharCode } = String;\n\n/**\n * Get string from char code in data view.\n * @param {DataView} dataView - The data view for read.\n * @param {number} start - The start index.\n * @param {number} length - The read length.\n * @returns {string} The read result.\n */\nexport function getStringFromCharCode(dataView, start, length) {\n  let str = '';\n  let i;\n\n  length += start;\n\n  for (i = start; i < length; i += 1) {\n    str += fromCharCode(dataView.getUint8(i));\n  }\n\n  return str;\n}\n\nconst { btoa } = window;\n\n/**\n * Transform array buffer to Data URL.\n * @param {ArrayBuffer} arrayBuffer - The array buffer to transform.\n * @param {string} mimeType - The mime type of the Data URL.\n * @returns {string} The result Data URL.\n */\nexport function arrayBufferToDataURL(arrayBuffer, mimeType) {\n  const uint8 = new Uint8Array(arrayBuffer);\n  const { length } = uint8;\n  let data = '';\n  let i;\n\n  for (i = 0; i < length; i += 1) {\n    data += fromCharCode(uint8[i]);\n  }\n\n  return `data:${mimeType};base64,${btoa(data)}`;\n}\n\n/**\n * Get orientation value from given array buffer.\n * @param {ArrayBuffer} arrayBuffer - The array buffer to read.\n * @returns {number} The read orientation value.\n */\nexport function getOrientation(arrayBuffer) {\n  const dataView = new DataView(arrayBuffer);\n  let orientation;\n  let littleEndian;\n  let app1Start;\n  let ifdStart;\n\n  // Only handle JPEG image (start by 0xFFD8)\n  if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\n    const length = dataView.byteLength;\n    let offset = 2;\n\n    while (offset < length) {\n      if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\n        app1Start = offset;\n        break;\n      }\n\n      offset += 1;\n    }\n  }\n\n  if (app1Start) {\n    const exifIDCode = app1Start + 4;\n    const tiffOffset = app1Start + 10;\n\n    if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {\n      const endianness = dataView.getUint16(tiffOffset);\n\n      littleEndian = endianness === 0x4949;\n\n      if (littleEndian || endianness === 0x4D4D /* bigEndian */) {\n        if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\n          const firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\n\n          if (firstIFDOffset >= 0x00000008) {\n            ifdStart = tiffOffset + firstIFDOffset;\n          }\n        }\n      }\n    }\n  }\n\n  if (ifdStart) {\n    const length = dataView.getUint16(ifdStart, littleEndian);\n    let offset;\n    let i;\n\n    for (i = 0; i < length; i += 1) {\n      offset = ifdStart + (i * 12) + 2;\n\n      if (dataView.getUint16(offset, littleEndian) === 0x0112 /* Orientation */) {\n        // 8 is the offset of the current tag's value\n        offset += 8;\n\n        // Get the original orientation value\n        orientation = dataView.getUint16(offset, littleEndian);\n\n        // Override the orientation with its default value\n        dataView.setUint16(offset, 1, littleEndian);\n        break;\n      }\n    }\n  }\n\n  return orientation;\n}\n\n/**\n * Parse Exif Orientation value.\n * @param {number} orientation - The orientation to parse.\n * @returns {Object} The parsed result.\n */\nexport function parseOrientation(orientation) {\n  let rotate = 0;\n  let scaleX = 1;\n  let scaleY = 1;\n\n  switch (orientation) {\n    // Flip horizontal\n    case 2:\n      scaleX = -1;\n      break;\n\n    // Rotate left 180°\n    case 3:\n      rotate = -180;\n      break;\n\n    // Flip vertical\n    case 4:\n      scaleY = -1;\n      break;\n\n    // Flip vertical and rotate right 90°\n    case 5:\n      rotate = 90;\n      scaleY = -1;\n      break;\n\n    // Rotate right 90°\n    case 6:\n      rotate = 90;\n      break;\n\n    // Flip horizontal and rotate right 90°\n    case 7:\n      rotate = 90;\n      scaleX = -1;\n      break;\n\n    // Rotate left 90°\n    case 8:\n      rotate = -90;\n      break;\n\n    default:\n  }\n\n  return {\n    rotate,\n    scaleX,\n    scaleY,\n  };\n}\n","import toBlob from 'blueimp-canvas-to-blob';\nimport isBlob from 'is-blob';\nimport DEFAULTS from './defaults';\nimport {\n  isImageType,\n  imageTypeToExtension,\n  arrayBufferToDataURL,\n  getOrientation,\n  parseOrientation,\n} from './utils';\n\nconst { ArrayBuffer, FileReader } = window;\nconst URL = window.URL || window.webkitURL;\nconst REGEXP_EXTENSION = /\\.\\w+$/;\n\n/**\n * Creates a new image compressor.\n * @class\n */\nexport default class ImageCompressor {\n  /**\n   * The constructor of ImageCompressor.\n   * @param {File|Blob} file - The target image file for compressing.\n   * @param {Object} [options] - The options for compressing.\n   */\n  constructor(file, options) {\n    this.result = null;\n\n    if (file) {\n      this.compress(file, options);\n    }\n  }\n\n  /**\n   * The main compress method.\n   * @param {File|Blob} file - The target image file for compressing.\n   * @param {Object} [options] - The options for compressing.\n   * @returns {Promise} - A Promise instance.\n   */\n  compress(file, options) {\n    const image = new Image();\n\n    options = {\n      ...DEFAULTS,\n      ...options,\n    };\n\n    if (!ArrayBuffer) {\n      options.checkOrientation = false;\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!isBlob(file)) {\n        reject(new Error('The first argument must be a File or Blob object.'));\n        return;\n      }\n\n      const mimeType = file.type;\n\n      if (!isImageType(mimeType)) {\n        reject(new Error('The first argument must be an image File or Blob object.'));\n        return;\n      }\n\n      if (!URL && !FileReader) {\n        reject(new Error('The current browser does not support image compression.'));\n        return;\n      }\n\n      if (URL && !options.checkOrientation) {\n        resolve(URL.createObjectURL(file));\n      } else if (FileReader) {\n        const reader = new FileReader();\n        const checkOrientation = options.checkOrientation && mimeType === 'image/jpeg';\n\n        reader.onload = ({ target }) => {\n          const { result } = target;\n\n          resolve(checkOrientation ? {\n            url: arrayBufferToDataURL(result, mimeType),\n            ...parseOrientation(getOrientation(result)),\n          } : {\n            url: result,\n          });\n        };\n        reader.onabort = reject;\n        reader.onerror = reject;\n\n        if (checkOrientation) {\n          reader.readAsArrayBuffer(file);\n        } else {\n          reader.readAsDataURL(file);\n        }\n      }\n    })\n      .then(data => new Promise((resolve, reject) => {\n        image.onload = () => resolve({\n          ...data,\n          naturalWidth: image.naturalWidth,\n          naturalHeight: image.naturalHeight,\n        });\n        image.onabort = reject;\n        image.onerror = reject;\n        image.alt = file.name;\n        image.src = data.url;\n      }))\n      .then(({\n        naturalWidth,\n        naturalHeight,\n        rotate = 0,\n        scaleX = 1,\n        scaleY = 1,\n      }) => new Promise((resolve) => {\n        const canvas = document.createElement('canvas');\n        const context = canvas.getContext('2d');\n        const aspectRatio = naturalWidth / naturalHeight;\n        let maxWidth = Math.max(options.maxWidth, 0) || Infinity;\n        let maxHeight = Math.max(options.maxHeight, 0) || Infinity;\n        let minWidth = Math.max(options.minWidth, 0) || 0;\n        let minHeight = Math.max(options.minHeight, 0) || 0;\n        let width = naturalWidth;\n        let height = naturalHeight;\n\n        if (maxWidth < Infinity && maxHeight < Infinity) {\n          if (maxHeight * aspectRatio > maxWidth) {\n            maxHeight = maxWidth / aspectRatio;\n          } else {\n            maxWidth = maxHeight * aspectRatio;\n          }\n        } else if (maxWidth < Infinity) {\n          maxHeight = maxWidth / aspectRatio;\n        } else if (maxHeight < Infinity) {\n          maxWidth = maxHeight * aspectRatio;\n        }\n\n        if (minWidth > 0 && minHeight > 0) {\n          if (minHeight * aspectRatio > minWidth) {\n            minHeight = minWidth / aspectRatio;\n          } else {\n            minWidth = minHeight * aspectRatio;\n          }\n        } else if (minWidth > 0) {\n          minHeight = minWidth / aspectRatio;\n        } else if (minHeight > 0) {\n          minWidth = minHeight * aspectRatio;\n        }\n\n        if (options.width > 0) {\n          ({ width } = options);\n          height = width / aspectRatio;\n        } else if (options.height > 0) {\n          ({ height } = options);\n          width = height * aspectRatio;\n        }\n\n        width = Math.min(Math.max(width, minWidth), maxWidth);\n        height = Math.min(Math.max(height, minHeight), maxHeight);\n\n        const destX = -width / 2;\n        const destY = -height / 2;\n        const destWidth = width;\n        const destHeight = height;\n\n        if (Math.abs(rotate) % 180 === 90) {\n          ({ width, height } = {\n            width: height,\n            height: width,\n          });\n        }\n\n        canvas.width = width;\n        canvas.height = height;\n\n        // Override the default fill color (#000, black)\n        context.fillStyle = 'transparent';\n        context.fillRect(0, 0, width, height);\n        context.save();\n        context.translate(width / 2, height / 2);\n        context.rotate((rotate * Math.PI) / 180);\n        context.scale(scaleX, scaleY);\n        context.drawImage(\n          image,\n          Math.floor(destX),\n          Math.floor(destY),\n          Math.floor(destWidth),\n          Math.floor(destHeight),\n        );\n        context.restore();\n\n        if (!isImageType(options.mimeType)) {\n          options.mimeType = file.type;\n        }\n\n        // Converts PNG files over the `convertSize` to JPEGs.\n        if (file.size > options.convertSize && options.mimeType === 'image/png') {\n          options.mimeType = 'image/jpeg';\n        }\n\n        if (canvas.toBlob) {\n          canvas.toBlob(resolve, options.mimeType, options.quality);\n        } else {\n          resolve(toBlob(canvas.toDataURL(options.mimeType, options.quality)));\n        }\n      }))\n      .then((result) => {\n        if (URL) {\n          URL.revokeObjectURL(image.src);\n        }\n\n        if (result) {\n          // Returns original file if the result is greater than it and without size related options\n          if (result.size > file.size && !(\n            options.width > 0 || options.height > 0 ||\n            options.maxWidth < Infinity || options.maxHeight < Infinity ||\n            options.minWidth > 0 || options.minHeight > 0)\n          ) {\n            result = file;\n          } else {\n            const date = new Date();\n\n            result.lastModified = date.getTime();\n            result.lastModifiedDate = date;\n            result.name = file.name;\n\n            // Convert the extension to match its type\n            if (result.name && result.type !== file.type) {\n              result.name = result.name.replace(\n                REGEXP_EXTENSION,\n                imageTypeToExtension(result.type),\n              );\n            }\n          }\n        } else {\n          // Returns original file if the result is null in some cases.\n          result = file;\n        }\n\n        this.result = result;\n\n        if (options.success) {\n          options.success(result);\n        }\n\n        return Promise.resolve(result);\n      })\n      .catch((err) => {\n        if (!options.error) {\n          throw err;\n        }\n\n        options.error(err);\n      });\n  }\n}\n"],"names":["define","Infinity","undefined","REGEXP_IMAGE_TYPE","isImageType","value","test","imageTypeToExtension","includeDot","extension","substr","fromCharCode","String","getStringFromCharCode","dataView","start","length","str","i","getUint8","window","btoa","arrayBufferToDataURL","arrayBuffer","mimeType","uint8","Uint8Array","data","getOrientation","DataView","orientation","littleEndian","app1Start","ifdStart","byteLength","offset","exifIDCode","tiffOffset","endianness","getUint16","firstIFDOffset","getUint32","setUint16","parseOrientation","rotate","scaleX","scaleY","ArrayBuffer","FileReader","URL","webkitURL","REGEXP_EXTENSION","ImageCompressor","file","options","result","compress","image","Image","DEFAULTS","checkOrientation","Promise","resolve","reject","isBlob","Error","type","createObjectURL","reader","onload","target","onabort","onerror","readAsArrayBuffer","readAsDataURL","then","naturalWidth","naturalHeight","alt","name","src","url","canvas","document","createElement","context","getContext","aspectRatio","maxWidth","Math","max","maxHeight","minWidth","minHeight","width","height","min","destX","destY","destWidth","destHeight","abs","fillStyle","fillRect","save","translate","PI","scale","drawImage","floor","restore","size","convertSize","toBlob","quality","toDataURL","revokeObjectURL","date","Date","lastModified","getTime","lastModifiedDate","replace","success","catch","err","error"],"mappings":"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"}